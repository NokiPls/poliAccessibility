package com.lgnm.fb.services;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.springframework.social.facebook.api.Facebook;
import org.springframework.social.facebook.api.FacebookProfile;
import org.springframework.social.facebook.api.PagedList;
import org.springframework.social.facebook.api.Reference;
import org.springframework.stereotype.Service;

import com.lgnm.fb.domain.Friend;

/**
 * Here the list of selected friends and common friends is generated by using
 * the facebook token, the user and the ids of the selected friends.
 * 
 */

@Service
public class CommonFriendsList implements CommonFriendsListInterface {

	private List<Friend> commonFriendsList;
	private String timeStamp;

	public CommonFriendsList() {
	};

	@Override
	public List<Friend> createCommonList(Facebook facebook,
			String[] idSelected, Friend user) {

		commonFriendsList = new ArrayList<Friend>();
		timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar
				.getInstance().getTime());

		// For every selected friend
		for (int i = 0; i < idSelected.length; i++) {

			FacebookProfile selFriend = facebook.userOperations()
					.getUserProfile(idSelected[i]);

			// Store the currently selected person as a "Friend" object in the
			// list.
			commonFriendsList.add(
					i,
					new Friend(Long.parseLong(selFriend.getId()), selFriend
							.getName(), null, user.getFbId(), user
							.getLoginDate(), timeStamp));

			// Get the common friends
			PagedList<Reference> mutual = facebook.friendOperations()
					.getMutualFriends(idSelected[i]);

			// For every common friend
			for (int k = 0; k < mutual.size(); k++) {
				// Store the currently selected common friend in the list.
				commonFriendsList
						.get(i)
						.getCommonFriends()
						.add(new Friend(Long.parseLong(mutual.get(k).getId()),
								mutual.get(k).getName(), commonFriendsList
										.get(i), user.getFbId(), user
										.getLoginDate(), timeStamp));

			}
		}
		return commonFriendsList;
	}

	@Override
	public List<Friend> getCommonFriends() {
		return commonFriendsList;
	}

}
